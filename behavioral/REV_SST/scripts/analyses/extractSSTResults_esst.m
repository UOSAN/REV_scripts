function [mixgo_mean_rt mixgo_median_rt gogo_median_rt ssrt_50 mixgo_rt_quant ssrt_quant mixgo_rt_int ssrt_int pct_inhib ssd50] = extractSSRTresults_esst(data_file,RIGHT,LEFT,num_steps)% function [GRTmean GRTmedian StDevGRT SSRT GRTquant SSRTquant GRTint SSRTint PctInhib SSDfifty] = extractSSRTresults_esst(data_file,RIGHT,LEFT,num_steps)plot_ladders=0;% PERFORMANCE_CHECK Check performance on stop-signal run%% USAGE: performance_check(data_file, plot_ladders)%% INPUTS %  data_file = .mat file containing %  plot_ladders = flag to produce plot of the ladder values (default = 1)%% Written by Bob Spunt, Jan. 7, 2013% =========================================================================% if nargin<1%     error('performance_check(data_file, plot_ladders)');%     return% elseif nargin<2%     plot_ladders = 1;% endif iscell(data_file);    data_file = char(data_file);endload(data_file);% -----------------% KEY for "Seeker"% -----------------% 1 - trial #% 2 - block #% 3 - go-only block? (0 = no, 1 = yes)% 4 - trial type (1 = go, 2 = stop, 3 = go-go)% 5 - arrow direction (1 = left, 2 = right)% 6 - ladder (1 or 2)% 7 - ISI (secs)% 8 - scheduled SSD (secs) % 9 - actual SSD (secs)% 10 - RT (secs)% 11 - response key (1 = left, 2 = right, 0 = NR)% 12 - arrow onset (secs)% <added below>% 13 - correct arrow direction (0 = no, 1 = yes)Seeker(:,13) = 3*Seeker(:,5)==Seeker(:,11);% trial type indicesidx_gogo_correct = find(Seeker(:,4)==3 & Seeker(:,13)==1);idx_mixgo_all = find(Seeker(:,4)==1);idx_mixgo_correct = find(Seeker(:,4)==1 & Seeker(:,13)==1);idx_mixgo_incorrect = find(Seeker(:,4)==1 & Seeker(:,13)~=1 & Seeker(:,11)~=0);idx_mixgo_nr = find(Seeker(:,4)==1 & Seeker(:,11)==0);idx_stop = find(Seeker(:,4)==2);idx_stopyes = find(Seeker(:,4)==2 & Seeker(:,11)==0);idx_stopno = find(Seeker(:,4)==2 & Seeker(:,11)~=0);Ladder1 = Seeker(Seeker(:,4)==2 & Seeker(:,6)==1, 9);Ladder2 = Seeker(Seeker(:,4)==2 & Seeker(:,6)==2, 9);% percent inhibition and stop-signal delaysfor ladder=1:2    ssd50(ladder) = nanmean(Seeker(Seeker(:,4)==2 & Seeker(:,6)==ladder, 9));    pct_inhib(ladder) = length(find(Seeker(:,4)==2 & Seeker(:,6)==ladder & Seeker(:,11)==0))/length(find(Seeker(:,4)==2 & Seeker(:,6)==ladder));end;ssd50 = 1000*(nanmean(ssd50));   % should be in msecpct_inhib = 100*(nanmean(pct_inhib));   % should be a percentage (0 - 100)% descriptives for go trialsmixgo_pct_error = 100*(length(idx_mixgo_incorrect)/length(idx_mixgo_all));mixgo_pct_nr = 100*(length(idx_mixgo_nr)/length(idx_mixgo_all));mixgo_rt_vector = 1000*(Seeker(idx_mixgo_correct,10));    % should be in msecmixgo_rt_quant = quantile(mixgo_rt_vector, nanmean(100-pct_inhib)/100);   % msecmixgo_median_rt = nanmedian(1000*(Seeker(idx_mixgo_correct,10)));mixgo_mean_rt = nanmean(1000*(Seeker(idx_mixgo_correct,10)));gogo_median_rt = nanmedian(1000*(Seeker(idx_gogo_correct,10))); % msec% ssrt (quantile-based)ssrt_50 = mixgo_median_rt - ssd50;   % msecssrt_quant = mixgo_rt_quant - ssd50;   % msecmixgo_rt_int=prctile(mixgo_rt_vector,mean(100-pct_inhib));ssrt_int =  mixgo_rt_int - ssd50;   % msec% print output to screenfprintf('\nPERFORMANCE CHECK\n');fprintf('Percent Inhibition: %2.2f\n', pct_inhib);fprintf('Percent Correct on Go Trials: %2.2f\n',100 - mixgo_pct_error);if mixgo_pct_error > 10   fprintf('   WARNING! Too many errors on go trials!\n');end;fprintf('Percent of Go Trials with No Response: %2.2f\n',mixgo_pct_nr);if mixgo_pct_nr > 10   fprintf('   WARNING! Too many Go trials with no response!\n');end;fprintf('SSRT (ms): %2.2f\n',ssrt_quant);if ssrt_quant < 80   fprintf('   WARNING! SSRT is too low!\n');end;fprintf('\n');% if request, make ladder plotif plot_ladders    a = max(Ladder1);    b = max(Ladder2);    ymax=max([a b]) + .1;    a = min(Ladder1);    b = min(Ladder2);    ymin=min([a b]);    if ymin>0,        ymin=0;    end;    xmax=length(Ladder1)+1;    for a=1:size(Ladder1),        Ladder1Plot(2*a-1)=Ladder1(a);        Ladder2Plot(2*a-1)=Ladder2(a);        Ladder1Plot(2*a)=Ladder1(a);        Ladder2Plot(2*a)=Ladder2(a);    end;    figure('Color','white')    subplot(1,2,1);    title('Ladder 1', 'fontsize', 18);    xlabel('Trial #', 'fontsize', 16);    ylabel('SSD (secs)', 'fontsize', 16);    for a=1:size(Ladder1)-1;        hold on;        plot(a:a+1,Ladder1Plot(2*a-1:2*a), 'b');        plot([a+1 a+1],Ladder1Plot(2*a:2*a+1), 'b');    end;    axis([1 xmax ymin ymax]);    subplot(1,2,2);    title('Ladder 2', 'fontsize', 18);    xlabel('Trial #', 'fontsize', 16);    for a=1:size(Ladder2)-1;        hold on;        plot(a:a+1,Ladder2Plot(2*a-1:2*a), 'b');        plot([a+1 a+1],Ladder2Plot(2*a:2*a+1), 'b');    end;    axis([1 xmax ymin ymax]);end