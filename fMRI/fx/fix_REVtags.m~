function fix_REVtags
%**********************DECLARING GLOBAL VARIABLES**************************
global subs
%**************************************************************************

%% Set up directories to be referenced!
baseDir = '/Users/mmoss/Dropbox/REV_repos'; %mmoss for laptop, Melissa for desktop
%dataDir = [baseDir '/REV_BxData'];
dataDir = [baseDir '/REV_scripts/behavioral/GNG'];
tagDir = [baseDir '/REV_scripts/behavioral/tasks/REV_GNG'];


%set working directory
[wdpath, ~, ~] = fileparts(which(mfilename));
%cd(wdpath)

%***************************IMPORT GNG TAGS********************************

cd(tagDir)

%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/Melissa/Dropbox/REV_repos/REV_scripts/behavioral/tasks/REV_GNG/gng_tags.txt

% Initialize variables.
filename = '/Users/mmoss/Dropbox/REV_repos/REV_scripts/behavioral/tasks/REV_GNG/gng_tags.txt';
delimiter = '\t';
startRow = 3;

% Read columns of data as strings:
formatSpec = '%s%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to format string.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


% Allocate imported array to column variable names
tag_gng1 = cell2mat(raw(:, 1));
tag_gng2 = cell2mat(raw(:, 2));
tag_gng3 = cell2mat(raw(:, 3));
tag_gng4 = cell2mat(raw(:, 4));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me;

%NOTE: each column from the original text file is now represented by a
%variable in Matlab workspace, using the column name (e.g., 'tag_gng1')

%%
%***************************CHECK GNG BASE*********************************

cd(dataDir);

subs = readtable('REVsubsList.txt');
listLength = size(subs);
nSubs = listLength(1);

cd([dataDir '/data'])

% Open the file. If in dataOnly mode, append to existing file and don't
% write field names. Otherwise, open a blank file and write field names.
fileID = fopen('OutputLog.txt','w');
fprintf(fileID,'output log for tag column check\n\n')
fclose(fileID);

for s = 1:nSubs
    files = ls('*.mat');
    matFiles = strsplit(files(1,:));
    mfiles = matFiles(1:(length(matFiles)-1)); %list of all matfiles
    
    for m = 1:length(mfiles)
        gng1 = strfind(mfiles(m),'GNG1');
        gng2 = strfind(mfiles(m),'GNG2');
        gng3 = strfind(mfiles(m),'GNG3');
        gng4 = strfind(mfiles(m),'GNG4');
        
        fileID = fopen('OutputLog.txt','a');
        
        if ~isempty(gng1{:})
            %impute values from gng1
            fprintf(fileID, mfiles{m}); fprintf(fileID, '\n'); fclose(fileID);
            checkTagsCol(mfiles(m),tag_gng1);
        elseif ~isempty(gng2{:})
            %impute values from gng2
            fprintf(fileID, mfiles{m}); fprintf(fileID, '\n'); fclose(fileID);
            checkTagsCol(mfiles(m),tag_gng2);
        elseif ~isempty(gng3{:})
            %impute values from gng3
            fprintf(fileID, mfiles{m}); fprintf(fileID, '\n'); fclose(fileID);
            checkTagsCol(mfiles(m),tag_gng3);
        elseif ~isempty(gng4{:})
            %impute values from gng4
            fprintf(fileID, mfiles{m}); fprintf(fileID, '\n'); fclose(fileID);
            checkTagsCol(mfiles(m),tag_gng4);
        else
            fprintf('\nError in %s GNG data!',subs{s})
        end
    end
    
end

end

function checkTagsCol(mfile,tagObj)
%**************************************************************************
%no global vars necessary
%**************************************************************************

subFile = load(mfile{:});

for t = 2:length(subFile.run_info.tag)
    if isempty(subFile.run_info.tag{t})
        subFile.run_info.tag{t}=tagObj(t-1);
    end
end
%fprintf('\n\nDone!\n\n'); %optional line
end


function x = isEmptyDirectory(p)
    if isdir(p)
      f = dir(p);
      x = length(f)>2; %this is the number of files in the dir
%     else 
%       error('Error: %s is not a directory');     
    end; 
end




